<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php $_product = $this->getProduct() ?>
<?php if ($_product->isAvailable()): ?>
    <?php
    $__['day'] = Mage::helper('estimateddeliverydate/data')->__('day');
    $__['days'] = Mage::helper('estimateddeliverydate/data')->__('days');
    $__['hour'] = Mage::helper('estimateddeliverydate/data')->__('hour');
    $__['hours'] = Mage::helper('estimateddeliverydate/data')->__('hours');
    $__['min'] = Mage::helper('estimateddeliverydate/data')->__('minute');
    $__['mins'] = Mage::helper('estimateddeliverydate/data')->__('minutes');
    $__['second'] = Mage::helper('estimateddeliverydate/data')->__('second');
    $__['seconds'] = Mage::helper('estimateddeliverydate/data')->__('seconds');


    $countdown_format = Mage::getStoreConfig("estimateddeliverydate/display_settings/countdown_format");
    $dynamic_countdown = Mage::getStoreConfig("estimateddeliverydate/display_settings/dynamic_countdown") ? "1" : "0";
    ?>

    <script>
        var elapsed_time = 0;
        function countdown(decrement) {
            $$('.edd_countdown').each(function (countdown) {


                if (countdown) {
                    var current_countdown = parseInt(countdown.getAttribute('countdown')) - elapsed_time;
                    if (decrement) {
                        elapsed_time += 1;
                    }
                    if (current_countdown <= 0) {
                        countdown.update("");
                        return;
                    }
                    var d = Math.floor(current_countdown / 86400);
                    var h = Math.floor(current_countdown % 86400 / 3600);
                    var m = Math.floor(current_countdown % 86400 % 3600 / 60);
                    var s = (current_countdown % 86400 % 3600 % 60);

                    var timer = new Array();
                    if (<?php echo $countdown_format; ?> >= 1) {
                        var day = (d > 0) ? ((d > 1) ? (d + " <?php echo $__['days']; ?>") : (d + " <?php echo $__['day']; ?>")) : "";
                        if (day != "")
                            timer.push(day);
                    }
                    if (<?php echo $countdown_format; ?> >= 2) {
                        var hour = (h > 0) ? ((h > 1) ? (h + " <?php echo $__['hours']; ?>") : (h + " <?php echo $__['hour']; ?>")) : "";
                        if (hour != "")
                            timer.push(hour);
                    }
                    if (<?php echo $countdown_format; ?> >= 3) {
                        var min = (m > 0) ? ((m > 1) ? (m + " <?php echo $__['mins']; ?>") : (m + " <?php echo $__['min']; ?>")) : "";
                        if (min != "")
                            timer.push(min);
                    }
                    if (<?php echo $countdown_format; ?> >= 4) {
                        var sec = (s > 0) ? ((s > 1) ? (s + " <?php echo $__['seconds']; ?>") : (s + " <?php echo $__['second']; ?>")) : "";
                        if (sec != "")
                            timer.push(sec);
                    }

                    countdown.update(timer.join().replace(/,/g, ', '));
                }
            })
        }
        document.observe("dom:loaded", function () {
            countdown();
            if (<?php echo $dynamic_countdown; ?> == 1) {
                setInterval(function () {
                    countdown(true);
                }, 1000);
            }
        });
    </script>

    <?php
    if ($_product->isConfigurable()) {


        $attributes = array();
        $_attributes = $_product->getTypeInstance(true)->getConfigurableAttributes($_product);
        foreach ($_attributes as $_attribute) {
            $attributes[] = Mage::getModel('eav/config')->getAttribute('catalog_product', $_attribute->getAttributeId());
        }



        $AssociatedProduct = $_product->getTypeInstance()->getUsedProducts();
        $children = array();
        $i = 0;
        foreach ($AssociatedProduct as $child) {
            foreach ($attributes as $attr) {
                $children[$i]["attribute" . $attr->getAttributeId()] = $child->getData($attr->getAttributeCode());
            }
            $children[$i]['message'] = Mage::helper("estimateddeliverydate/data")->getProductMessage($child, Mage::app()->getStore()->getId());
//            $children[$i]['message'] .="<br>". Mage::helper("estimateddeliverydate/data")->getProductMessage2($child, Mage::app()->getStore()->getId());

            $i++;
        };
        ?>
        <script>
            var edd = <?php echo json_encode($children); ?>;
            var launched = false;
            document.observe("dom:loaded", function () {
                $$(".swatch-link").each(function (sa) {

                    sa.observe("click", function () {

                        setTimeout(function () {
                            updateMessage()
                        }, 100);
                    })
                })
                $$(".super-attribute-select").each(function (sa) {

                    sa.observe("change", function () {
                        updateMessage()
                    })
                })
            })
            function updateMessage() {
                attr = [];
                selection = true;
                $$(".super-attribute-select").each(function (s) {
                    if (s.value === "")
                        selection = false;
                    attr.push({'id': s.id, 'value': s.value});
                });
                if (selection) {
                    edd.each(function (e) {
                        found = true;
                        attr.each(function (a) {
                            if (eval("e." + a.id) !== a.value)
                                found = false;
                        });
                        if (found) {
                            $("leattimes").update(e.message);
                            countdown(false);
                        }
                    })
                } else {
                    $("leattimes").update();
                }
            }
            





        </script>
        <div class="notice" id="leattimes"></div>
    <?php } else { ?>
        <div class="notice leattimes" id='leattimes1'> <?php echo Mage::helper("estimateddeliverydate/data")->getProductMessage($_product, Mage::app()->getStore()->getId()); ?></div>

    <?php } ?>



    <!--<p class="availability in-stock"><?php echo $this->__('Availability:') ?> <span><?php echo $this->__('In stock') ?></span></p>-->
<?php else: ?>
    <!--<p class="availability out-of-stock"><?php echo $this->__('Availability:') ?> <span><?php echo $this->__('Out of stock') ?></span></p>-->
<?php endif; ?>
<?php echo $this->getChildHtml('product_type_data_extra') ?>
<?php echo $this->getPriceHtml($_product) ?>
